################# CSC258 Assembly Final Project ###################
# This file contains our implementation of Dr Mario.
#
# Student 1: Qi Wen Wei, 1010465168
# Student 2: Marina Tanaka, 1009784299
#
# We assert that the code submitted here is entirely our own 
# creation, and will indicate otherwise when it is not.

######################## Bitmap Display Configuration ########################
# - Unit width in pixels:       64
# - Unit height in pixels:      32
# - Display width in pixels:    1
# - Display height in pixels:   1
# - Base Address for Display:   0x10008000 ($gp)
##############################################################################
    .data
##############################################################################
# Immutable Data
##############################################################################
# The address of the bitmap display. Don't forget to connect it!
ADDR_DSPL:
    .word 0x10008000
# The address of the keyboard. Don't forget to connect it!
ADDR_KBRD:
    .word 0xffff0000
# How long each row in the bitmap is
ROW_LENGTH:
    .word 64
call_count: .word 0        # Call counter
delay_counter: .word 100
# Color list
colors: .word 0xffff00, 0xd21404, 0x0442f6, 0x000000  # Yellow, Red, Blue, Black
# White
white: .word 0xffffff
black: .word 0x000000
# virus color
VIRUS_COLORS: .word 0xffff00, 0xd21404, 0x0442f6 # yellow, red, blue with a tint
# counts to 1000
GRAVITY_COUNTER: .word 0
# ms before gravity pulls pill down
# Gravity speed settings (in milliseconds)
GRAVITY_SPEEDS: .word 100, 80, 60  # Easy, Medium, Hard
GRAVITY_SPEED:  .word 1              # Default to medium (index 1)
delay_counter_easy: .word 100
delay_counter_medium: .word 80
delay_counter_hard: .word 60
# MUSIC 
    times: .word 1920, 1920, 2160, 2160, 2400, 2400, 2640, 2640, 2880, 2880, 3120, 3120, 3360, 3360, 3600, 3600, 3840, 3840, 4080, 4080, 4320, 4320, 4560, 4560, 4800, 4800, 5040, 5040, 5280, 5280, 5520, 5520, 5760, 5760, 5760, 6000, 6000, 6000, 6240, 6240, 6240, 6480, 6480, 6480, 6720, 6720, 6720, 6960, 6960, 6960, 7200, 7200, 7200, 7440, 7440, 7440, 7680, 7680, 7680, 7920, 7920, 7920, 8160, 8160, 8160, 8400, 8400, 8400, 8640, 8640, 8640, 8880, 8880, 9120, 9120, 9360, 9360, 9600, 9600, 9600, 9840, 9840, 9840, 10080, 10080, 10080, 10320, 10320, 10320, 10560, 10560, 10560, 10800, 10800, 10800, 
    11040, 11040, 11040, 11280, 11280, 11280, 11520, 11520, 11520, 12000, 12000, 12000, 12480, 12480, 12480, 12960, 12960, 12960, 13440, 13440, 13440, 13680, 13680, 13680, 13920, 13920, 13920, 14160, 14160, 14160, 14400, 14400, 14400, 14640, 14640, 14640, 14880, 14880, 14880, 15120, 15120, 15120, 15360, 15360, 15360, 15600, 15600, 15600, 15840, 15840, 15840, 16080, 16080, 16080, 16320, 16320, 16320, 16560, 16560, 16800, 16800, 17040, 17040, 17280, 17280, 17280, 17520, 17520, 17520, 17760, 17760, 17760, 18000, 18000, 18000, 18240, 18240, 18240, 18480, 18480, 18480, 18720, 18720, 18720, 18960, 
    18960, 18960, 21120, 21120, 21120, 21360, 21360, 21360, 21600, 21600, 21600, 21840, 21840, 21840, 22080, 22080, 22080, 22320, 22320, 22320, 22560, 22560, 22560, 22800, 22800, 22800, 23040, 23040, 23040, 23280, 23280, 23280, 23520, 23520, 23520, 23760, 23760, 23760, 24000, 24000, 24000, 24240, 24240, 24480, 24480, 24720, 24720, 24960, 24960, 24960, 25200, 25200, 25200, 25440, 25440, 25440, 25680, 25680, 25680, 25920, 25920, 25920, 26160, 26160, 26160, 26400, 26400, 26400, 26640, 26640, 26640, 26880, 26880, 27120, 27120, 27360, 27360, 27600, 27600, 27840, 27840, 27840, 28320, 28320, 28320, 
    28800, 28800, 28800, 29040, 29040, 29040, 29280, 29280, 29280, 29520, 29520, 29520, 29760, 29760, 29760, 30240, 30720, 30720, 30720, 30960, 30960, 30960, 31200, 31200, 31200, 31440, 31440, 31440, 31680, 31680, 31680, 32160, 32640, 32640, 32640, 32880, 32880, 32880, 33120, 33120, 33120, 33360, 33360, 33360, 33600, 33600, 33600, 33840, 33840, 33840, 34080, 34080, 34080, 34320, 34320, 34320, 34560, 34560, 34560, 35040, 35040, 35040, 35520, 35520, 35520, 35520, 35520, 36480, 37440, 37920, 38400, 40320, 41280, 41760, 42240, 44160, 45120, 45600, 46080, 48000, 48960, 49440, 49920, 51840, 51840, 
    51840, 52080, 52080, 52080, 52320, 52320, 52320, 52560, 52560, 52560, 52800, 52800, 52800, 53280, 53280, 53760, 53760, 53760, 54000, 54000, 54000, 54240, 54240, 54240, 54480, 54480, 54480, 54720, 54720, 54720, 55200, 55200, 55680, 55680, 55680, 55920, 55920, 55920, 56160, 56160, 56160, 56400, 56400, 56400, 56640, 56640, 56640, 56880, 56880, 56880, 57120, 57120, 57120, 57360, 57360, 57360, 57600, 57600, 57600, 58080, 58080, 58080, 58560, 58560, 58560, 58560, 58560, 59520, 59520, 59760, 59760, 60000, 60000, 60240, 60240, 60480, 60480, 60720, 60720, 60960, 60960, 61200, 61200, 61440, 61440, 
    61680, 61680, 61920, 61920, 62160, 62160, 62400, 62400, 62640, 62640, 62880, 62880, 63120, 63120, 63360, 63360, 63600, 63600, 63840, 63840, 64080, 64080, 64320, 64320, 64560, 64560, 64800, 64800, 65040, 65040, 65280, 65280, 65520, 65520, 65760, 65760, 66000, 66000, 66240, 66240, 66480, 66480, 66720, 66720, 66948, 66948, 67200, 67200, 67440, 67440, 67680, 67680, 67920, 67920, 68160, 68160, 68400, 68400, 68640, 68640, 68880, 68880, 69120, 69120, 69360, 69360, 69600, 69600, 69840, 69840, 70080, 70080, 70320, 70320, 70560, 70560, 70800, 70800, 71040, 71040, 71280, 71280, 71520, 71520, 71760, 
    71760, 72000, 72000, 72240, 72240, 72480, 72480, 72720, 72720, 72960, 72960, 73200, 73200, 73440, 73440, 73680, 73680, 73920, 73920, 74160, 74160, 74400, 74400, 74640, 74640, 74880, 74880, 75120, 75120, 76800, 76800, 77040, 77040, 78720, 78720, 78960, 78960, 80640, 80640, 82560, 82560, 82560, 82800, 82800, 82800, 83040, 83040, 83040, 83280, 83280, 83280, 83520, 83520, 83520, 83760, 83760, 83760, 84000, 84000, 84000, 84240, 84240, 84240, 84480, 84480, 84480, 84720, 84720, 84720, 84960, 84960, 84960, 85200, 85200, 85200, 85440, 85440, 85440, 85680, 85680, 85920, 85920, 86160, 86160, 86400, 
    86400, 86400, 86640, 86640, 86640, 86880, 86880, 86880, 87120, 87120, 87120, 87360, 87360, 87360, 87600, 87600, 87600, 87840, 87840, 87840, 88080, 88080, 88080, 88320, 88320, 88320, 88440, 88440, 88440, 88560, 88560, 88560, 88800, 88800, 88800, 88920, 88920, 88920, 89040, 89040, 89040, 89280, 89280, 89280, 89400, 89400, 89400, 89520, 89520, 89520, 89760, 89760, 89760, 89880, 89880, 89880, 90000, 90000, 90000, 90240, 90240, 90240, 90480, 90480, 90480, 90720, 90720, 90720, 90960, 90960, 90960, 91200, 91200, 91200, 91440, 91440, 91440, 91680, 91680, 91680, 91920, 91920, 91920, 92160, 92160, 
    92160, 92400, 92400, 92400, 92640, 92640, 92640, 92880, 92880, 92880, 93120, 93120, 93120, 93360, 93360, 93600, 93600, 93840, 93840, 94080, 94080, 94080, 94320, 94320, 94320, 94560, 94560, 94560, 94800, 94800, 94800, 95040, 95040, 95040, 95280, 95280, 95280, 95520, 95520, 95520, 95760, 95760, 95760, 97920, 97920, 97920, 98160, 98160, 98160, 98400, 98400, 98400, 98640, 98640, 98640, 98880, 98880, 98880, 99120, 99120, 99120, 99360, 99360, 99360, 99600, 99600, 99600, 99840, 99840, 99840, 100080, 100080, 100080, 100320, 100320, 100320, 100560, 100560, 100560, 100800, 100800, 100800, 101040, 
    101040, 101280, 101280, 101520, 101520, 101760, 101760, 101760, 102000, 102000, 102000, 102240, 102240, 102240, 102480, 102480, 102480, 102720, 102720, 102720, 102960, 102960, 102960, 103200, 103200, 103200, 103440, 103440, 103440, 103680, 103680, 103920, 103920, 104160, 104160, 104400, 104400, 104640, 104640, 104640, 105120, 105120, 105120, 105600, 105600, 105600, 105840, 105840, 105840, 106080, 106080, 106080, 106320, 106320, 106320, 106560, 106560, 106560, 107040, 107040, 107520, 107520, 107520, 107760, 107760, 107760, 108000, 108000, 108000, 108240, 108240, 108240, 108480, 108480, 
    108480, 108960, 108960, 109440, 109440, 109440, 109680, 109680, 109680, 109920, 109920, 109920, 110160, 110160, 110160, 110400, 110400, 110400, 110640, 110640, 110640, 110880, 110880, 110880, 111120, 111120, 111120, 111360, 111360, 111360, 111840, 111840, 111840, 112320, 112320, 112320, 112320, 112320, 113280, 114240, 114720, 115200, 117120, 118080, 118560, 119040, 120960, 121920, 122400, 122880, 124800, 125760, 126240, 126720, 128640, 128640, 128640, 128880, 128880, 129120, 129120, 129360, 129360, 129600, 129600, 129840, 129840, 129840, 130080, 130080, 130320, 130320, 130340, 130560, 
    130560, 130560, 130800, 130800, 130800, 131040, 131040, 131040, 131280, 131280, 131520, 131520, 131760, 131760, 132000, 132000, 132240, 132240, 132480, 132480, 132480, 132720, 132720, 132720, 132960, 132960, 133200, 133200, 133440, 133440, 133680, 133680, 133680, 133920, 133920, 134160, 134160, 134160, 134400, 134400, 134400, 134880, 134880, 135360, 135360, 135600, 135840, 135840, 136080, 136320, 136320, 136320, 136560, 136560, 136800, 136800, 136800, 137040, 137040, 137280, 137280, 137280, 137520, 137520, 137520, 137760, 137760, 137760, 138000, 138000, 138000, 138240, 138240, 138240, 
    138480, 138480, 138480, 138720, 138720, 138960, 138960, 138960, 139200, 139200, 139440, 139440, 139440, 139680, 139680, 139680, 139920, 139920, 139920, 140160, 140160, 140160, 140400, 140400, 140400, 140640, 140640, 140640, 140880, 140880, 141120, 141120, 141120, 141360, 141360, 141600, 141600, 141600, 141840, 141840, 142080, 142080, 142080, 142560, 142560, 143040, 143040, 143520, 143520, 144000, 144000, 144480, 144480, 144960, 144960, 145440, 145440, 145920, 145920, 145920, 146160, 146160, 146160, 146400, 146400, 146400, 146640, 146640, 146640, 146880, 146880, 146880, 147120, 147120, 
    147120, 147360, 147360, 147360, 147600, 147600, 147600, 147840, 147840, 147840, 148080, 148080, 148080, 148320, 148320, 148320, 148560, 148560, 148560, 148800, 148800, 148800, 149760, 149760, 149760, 150000, 150000, 150000, 150240, 150240, 150240, 150480, 150480, 150480, 150720, 150720, 150720, 150960, 150960, 150960, 151200, 151200, 151200, 151440, 151440, 151440, 151680, 151680, 151680, 152160, 152160, 152160, 152640, 152640, 152640, 153120, 153120, 153120, 153600, 153600, 153600, 153840, 153840, 153840, 154080, 154080, 154080, 154320, 154320, 154320, 154560, 154560, 154560, 154800, 
    154800, 154800, 155040, 155040, 155040, 155280, 155280, 155280, 155520, 155520, 155520, 155760, 155760, 155760, 156000, 156000, 156000, 156240, 156240, 156240, 156480, 156480, 156480, 157440, 157440, 157440, 157680, 157680, 157680, 157920, 157920, 157920, 158160, 158160, 158160, 158400, 158400, 158400, 158640, 158640, 158640, 158880, 158880, 158880, 159120, 159120, 159120, 161280, 161280, 161280, 161520, 161520, 161520, 161760, 161760, 161760, 162000, 162000, 162000, 162240, 162240, 162240, 162480, 162480, 162480, 162720, 162720, 162720, 162960, 162960, 162960, 163200, 163200, 163200, 
    163440, 163440, 163440, 163680, 163680, 163680, 163920, 163920, 163920, 164160, 164160, 164160, 165120, 165120, 165120, 165360, 165360, 165360, 165600, 165600, 165600, 165840, 165840, 165840, 166080, 166080, 166080, 166320, 166320, 166320, 166560, 166560, 166560, 166800, 166800, 166800, 167040, 167040, 167280, 167280, 167520, 167520, 167760, 167760, 168000, 168000, 168000, 168480, 168480, 168480, 168960, 168960, 168960, 169200, 169200, 169200, 169440, 169440, 169440, 169680, 169680, 169680, 169920, 169920, 169920, 170400, 170880, 170880, 170880, 171120, 171120, 171120, 171360, 171360, 
    171360, 171600, 171600, 171600, 171840, 171840, 171840, 172320, 172800, 172800, 172800, 173040, 173040, 173040, 173280, 173280, 173280, 173520, 173520, 173520, 173760, 173760, 173760, 174000, 174000, 174000, 174240, 174240, 174240, 174480, 174480, 174480, 174720, 174720, 174720, 175200, 175200, 175200, 175680, 175680, 175680, 175680, 175680, 176640, 176640, 176640, 177120, 177120, 177600, 177600, 177960, 177960, 178204, 178448, 178704, 178704, 179004, 179300, 179652, 179724, 179800, 179836, 179964, 180040, 180100, 180188, 180224, 180360, 180436, 180472, 11520, 11640, 11760, 12000, 12120, 
    12240, 12480, 12600, 12720, 12960, 13080, 13200, 13440, 13920, 14140, 14400, 14880, 15120, 15360, 15840, 16080, 16320, 17280, 17760, 18000, 18240, 18720, 18960, 21120, 21600, 21840, 22080, 22560, 22776, 23024, 23496, 23740, 23992, 24480, 24960, 25440, 25680, 25920, 26400, 26640, 26892, 27136, 27364, 27604, 27848, 28320, 36480, 37440, 37920, 38400, 40320, 41280, 41760, 42240, 44160, 45120, 45600, 46080, 48000, 48960, 49440, 49920, 82560, 83040, 83280, 83520, 84016, 84240, 84480, 84976, 85200, 85440, 86400, 86880, 87120, 87360, 87840, 88080, 88320, 88440, 88560, 88800, 88920, 89040, 89280, 
    89400, 89520, 89760, 89880, 90000, 90240, 90720, 90940, 91200, 91680, 91920, 92160, 92640, 92880, 93120, 94080, 94560, 94800, 95040, 95520, 95760, 97920, 98400, 98640, 98880, 99360, 99600, 99840, 100320, 100560, 100800, 101040, 101280, 101520, 101760, 102240, 102480, 102720, 103200, 103440, 103676, 104168, 104392, 104660, 105600, 105840, 106080, 106320, 106560, 107520, 107760, 108000, 108240, 108480, 109440, 109680, 109920, 110160, 110400, 110640, 110880, 111120, 111360, 111840, 112320, 113280, 114240, 114720, 115200, 117120, 118080, 118560, 119040, 120960, 121920, 122400, 122880, 124800, 
    125760, 126240, 126720, 151680, 151800, 151920, 152160, 152280, 152400, 152640, 152760, 152880, 153120, 153240, 153360, 153600, 154080, 154300, 154560, 155040, 155280, 155520, 156000, 156240, 156480, 157440, 157920, 158160, 158400, 158880, 159120, 161280, 161760, 162000, 162240, 162720, 162936, 163184, 163656, 163900, 164152, 165120, 165600, 165840, 166080, 166560, 166800, 167052, 167296, 167524, 167764, 168008, 168480, 30240, 30240, 32160, 32160, 107040, 107040, 108960, 108960, 128640, 129120, 129120, 129600, 129840, 130080, 130080, 130320, 130560, 131040, 131040, 131520, 131760, 132000, 
    132000, 132240, 132480, 132960, 132960, 133440, 133680, 133920, 133920, 134160, 134400, 134640, 134880, 134880, 135120, 135360, 135360, 135600, 135840, 135840, 136080, 136320, 136800, 136800, 136800, 137280, 137520, 137760, 137760, 138000, 138240, 138720, 138720, 138720, 139200, 139440, 139680, 139680, 139680, 139920, 140160, 140640, 140640, 140640, 141120, 141360, 141600, 141600, 141600, 142080, 142560, 142920, 143040, 143520, 143880, 144000, 144480, 144840, 144960, 145440, 145920, 145920, 146160, 146400, 146400, 146640, 146880, 146880, 147120, 147360, 147360, 147600, 147840, 147840, 148080, 148320, 148320, 148560, 148800, 
    148800, 149040, 149280, 149280, 149520, 149760, 149760, 150000, 150240, 150240, 150480, 150720, 150720, 150960, 151200, 151200, 151440, 151680, 151680, 151920, 152160, 152160, 152400, 152640, 152640, 152880, 153120, 153120, 153360, 153360, 153360, 153600, 153600, 153840, 154080, 154080, 154320, 154560, 154560, 154800, 154800, 155040, 155040, 155280, 155520, 155520, 155760, 156000, 156000, 156240, 156480, 156480, 156960, 156960, 157440, 157440, 157680, 157920, 157920, 158160, 158160, 158400, 158400, 158640, 158880, 158880, 159120, 159360, 159840, 160320, 160800, 161280, 161280, 161520, 161760, 161760, 162000, 162000, 162240, 
    162240, 162480, 162720, 162720, 162960, 163200, 163200, 163440, 163680, 163680, 163920, 164160, 164160, 164640, 165120, 165120, 165360, 165600, 165600, 165840, 165840, 166080, 166080, 166320, 166560, 166560, 166800, 167040, 167040, 167280, 167280, 167280, 167400, 167400, 167520, 167520, 167520, 167760, 167760, 167760, 168000, 168000, 168000, 168240, 168480, 168480, 168720, 168960, 168960, 169440, 169920, 170400, 170400, 170880, 171360, 171840, 172304, 172800, 173280, 173760, 174240, 174480, 174720, 175200, 175200, 175680, 176160, 176160, 36480, 36720, 36960, 37200, 37440, 37680, 37920, 38160, 38400, 38640, 38880, 39120, 39360, 
    39600, 39840, 40080, 40320, 40560, 40800, 41040, 41280, 41520, 41760, 42000, 42240, 42480, 42720, 42960, 43200, 43440, 43680, 43920, 44160, 44400, 44640, 44880, 45120, 45360, 45600, 45840, 46080, 46320, 46560, 46800, 47040, 47280, 47520, 47760, 48000, 48240, 48480, 48720, 48960, 49200, 49440, 49680, 49920, 50160, 50400, 50640, 50880, 51120, 51360, 51600, 113280, 113520, 113760, 114000, 114240, 114480, 114720, 114960, 115200, 115440, 115680, 115920, 116160, 116400, 116640, 116880, 117120, 117360, 117600, 117840, 118080, 118320, 118560, 118800, 119040, 119280, 119520, 119760, 120000, 120240, 120480, 120720, 120960, 121200, 121440, 121680, 
    121920, 122160, 122400, 122640, 122880, 123120, 123360, 123600, 123840, 124080, 124320, 124560, 124800, 125040, 125280, 125520, 125760, 126000, 126240, 126480, 126720, 126960, 127200, 127440, 127680, 127920, 128160, 128400, 36572, 36812, 37052, 37292, 37532, 37772, 38012, 38252, 38492, 38732, 38972, 39212, 39452, 39692, 39932, 40172, 40412, 40652, 40892, 41132, 41372, 41612, 41852, 42092, 42332, 42572, 42812, 43052, 43292, 43532, 43772, 44012, 44252, 44492, 44732, 44972, 45212, 45452, 45692, 45932, 46172, 46412, 46652, 46892, 47132, 47372, 47612, 47852, 48092, 48332, 48572, 48812, 49052, 49292, 49532, 49772, 50012, 50252, 50492, 50732, 
    50972, 51212, 51452, 51692, 113372, 113612, 113852, 114092, 114332, 114572, 114812, 115052, 115292, 115532, 115772, 116012, 116252, 116492, 116732, 116972, 117212, 117452, 117692, 117932, 118172, 118412, 118652, 118892, 119132, 119372, 119612, 119852, 120092, 120332, 120572, 120812, 121052, 121292, 121532, 121772, 122012, 122252, 122492, 122732, 122972, 123212, 123452, 123692, 123932, 124172, 124412, 124652, 124892, 125132, 125372, 125612, 125852, 126092, 126332, 126572, 126812, 127052, 127292, 127532, 127772, 128012, 128252, 128492, 36480, 36960, 37200, 37440, 37920, 38160, 38400, 38880, 39120, 39360, 39840, 40320, 40800, 41040, 41280, 
    notes: .word 31, 42, 31, 43, 34, 46, 47, 35, 48, 36, 47, 35, 46, 34, 45, 33, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 47, 35, 46, 34, 45, 33, 31, 43, 82, 31, 43, 83, 34, 46, 82, 47, 35, 83, 81, 48, 36, 79, 36, 48, 79, 37, 49, 81, 50, 38, 31, 43, 82, 83, 31, 43, 81, 34, 46, 79, 47, 35, 79, 48, 36, 36, 48, 37, 49, 50, 38, 31, 43, 82, 31, 43, 83, 82, 34, 46, 47, 35, 83, 81, 48, 36, 36, 48, 79, 37, 49, 79, 81, 50, 38, 35, 47, 71, 72, 36, 48, 49, 73, 37, 74, 50, 38, 31, 43, 82, 31, 43, 83, 82, 34, 46, 83, 47, 35, 81, 48, 36, 79, 36, 48, 79, 49, 37, 81, 50, 38, 82, 31, 43, 83, 43, 31, 81, 34, 46, 79, 47, 35, 79, 36, 48, 36, 48, 37, 49, 38, 50, 
    31, 43, 82, 31, 43, 83, 46, 34, 82, 47, 35, 83, 48, 36, 81, 79, 48, 36, 37, 49, 79, 50, 38, 81, 75, 48, 36, 36, 48, 76, 39, 51, 75, 40, 52, 76, 74, 53, 41, 72, 41, 53, 72, 54, 42, 43, 55, 69, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 41, 53, 42, 54, 55, 43, 36, 48, 75, 48, 36, 76, 39, 51, 75, 52, 40, 76, 41, 53, 74, 41, 53, 72, 42, 54, 72, 55, 43, 69, 66, 42, 45, 69, 47, 71, 50, 74, 67, 72, 43, 71, 67, 43, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 29, 36, 48, 75, 48, 36, 76, 51, 39, 74, 52, 40, 72, 41, 53, 72, 29, 75, 36, 48, 48, 36, 76, 75, 51, 39, 76, 52, 40, 74, 53, 41, 72, 41, 53, 72, 42, 54, 69, 43, 
    55, 72, 67, 43, 74, 67, 43, 36, 48, 72, 64, 67, 52, 50, 55, 48, 57, 55, 60, 53, 52, 50, 55, 48, 57, 55, 59, 60, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 41, 29, 36, 48, 75, 48, 36, 76, 51, 39, 74, 52, 40, 72, 41, 53, 72, 41, 29, 75, 36, 48, 48, 36, 76, 75, 51, 39, 76, 52, 40, 74, 53, 41, 72, 41, 53, 72, 42, 54, 69, 43, 55, 72, 67, 43, 74, 67, 43, 36, 48, 72, 64, 67, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 38, 50, 49, 37, 36, 48, 47, 35, 34, 46, 33, 45, 32, 44, 31, 43, 31, 
    43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 48, 36, 49, 37, 38, 50, 38, 50, 49, 37, 48, 36, 47, 35, 34, 46, 45, 33, 32, 44, 31, 43, 30, 42, 29, 41, 30, 42, 41, 29, 30, 42, 29, 41, 43, 31, 31, 43, 82, 31, 43, 83, 34, 46, 82, 47, 35, 83, 48, 36, 81, 36, 48, 79, 37, 49, 79, 50, 38, 81, 31, 43, 82, 31, 43, 83, 34, 46, 81, 47, 35, 79, 48, 36, 79, 36, 48, 37, 49, 50, 38, 31, 43, 82, 31, 43, 83, 34, 46, 82, 47, 35, 83, 48, 36, 81, 36, 48, 79, 37, 49, 79, 50, 38, 81, 71, 35, 47, 71, 35, 47, 71, 35, 47, 72, 36, 48, 72, 36, 48, 72, 
    36, 48, 73, 37, 49, 73, 37, 49, 73, 37, 49, 74, 38, 50, 74, 38, 50, 74, 38, 50, 31, 43, 82, 31, 43, 83, 82, 34, 46, 83, 47, 35, 81, 48, 36, 79, 36, 48, 79, 49, 37, 81, 50, 38, 82, 31, 43, 83, 43, 31, 81, 34, 46, 79, 47, 35, 79, 36, 48, 36, 48, 37, 49, 38, 50, 31, 43, 82, 31, 43, 83, 46, 34, 82, 47, 35, 83, 48, 36, 81, 79, 48, 36, 37, 49, 79, 50, 38, 81, 75, 48, 36, 36, 48, 76, 39, 51, 75, 40, 52, 76, 74, 53, 41, 72, 41, 53, 72, 54, 42, 43, 55, 69, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 41, 53, 42, 54, 55, 43, 36, 48, 75, 48, 36, 76, 39, 51, 75, 52, 40, 76, 41, 53, 74, 41, 53, 72, 42, 54, 72, 55, 43, 69, 66, 42, 45, 69, 
    47, 71, 50, 74, 67, 72, 43, 71, 67, 43, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 41, 29, 36, 48, 75, 48, 36, 76, 51, 39, 74, 52, 40, 72, 41, 53, 72, 41, 29, 75, 36, 48, 48, 36, 76, 75, 51, 39, 76, 52, 40, 74, 53, 41, 72, 41, 53, 72, 42, 54, 69, 43, 55, 72, 67, 43, 74, 67, 43, 36, 48, 72, 64, 67, 52, 50, 55, 48, 57, 55, 60, 53, 52, 50, 55, 48, 57, 55, 59, 60, 67, 31, 43, 31, 43, 34, 46, 47, 35, 48, 36, 69, 36, 48, 37, 49, 70, 38, 50, 71, 31, 43, 70, 31, 43, 71, 46, 34, 35, 47, 48, 36, 36, 48, 37, 49, 38, 50, 73, 43, 31, 74, 31, 43, 46, 34, 35, 47, 36, 48, 73, 48, 36, 37, 49, 74, 38, 50, 79, 47, 35, 36, 48, 37, 49, 74, 50, 
    38, 73, 67, 43, 31, 31, 43, 67, 34, 46, 35, 47, 69, 48, 36, 70, 48, 36, 71, 49, 37, 70, 50, 38, 71, 43, 31, 67, 43, 31, 34, 46, 67, 35, 47, 36, 48, 64, 48, 36, 67, 37, 49, 64, 38, 50, 70, 43, 31, 71, 31, 43, 67, 34, 46, 47, 35, 64, 48, 36, 36, 48, 69, 37, 49, 50, 38, 67, 55, 43, 43, 31, 52, 40, 46, 34, 45, 33, 51, 39, 50, 38, 54, 42, 31, 43, 82, 31, 43, 83, 34, 46, 82, 47, 35, 83, 81, 48, 36, 79, 36, 48, 79, 37, 49, 81, 50, 38, 31, 43, 82, 83, 31, 43, 81, 34, 46, 79, 47, 35, 79, 48, 36, 31, 43, 82, 31, 43, 83, 82, 34, 46, 47, 35, 83, 81, 48, 36, 36, 48, 79, 37, 49, 79, 81, 50, 38, 35, 47, 71, 72, 36, 48, 49, 73, 37, 74, 50, 38, 31, 43, 82, 
    31, 43, 83, 82, 34, 46, 83, 47, 35, 81, 48, 36, 79, 36, 48, 79, 49, 37, 81, 50, 38, 82, 31, 43, 83, 43, 31, 81, 34, 46, 79, 47, 35, 79, 36, 48, 31, 43, 82, 31, 43, 83, 46, 34, 82, 47, 35, 83, 48, 36, 81, 79, 48, 36, 37, 49, 79, 50, 38, 81, 75, 48, 36, 36, 48, 76, 39, 51, 75, 40, 52, 76, 74, 53, 41, 72, 41, 53, 72, 54, 42, 43, 55, 69, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 36, 48, 75, 48, 36, 76, 39, 51, 75, 52, 40, 76, 41, 53, 74, 41, 53, 72, 42, 54, 72, 55, 43, 69, 66, 42, 45, 69, 47, 71, 50, 74, 67, 72, 43, 71, 67, 43, 36, 48, 75, 48, 36, 76, 39, 51, 74, 72, 52, 40, 72, 41, 53, 29, 36, 48, 75, 48, 36, 76, 51, 39, 74, 
    52, 40, 72, 41, 53, 72, 29, 75, 36, 48, 48, 36, 76, 75, 51, 39, 76, 52, 40, 74, 53, 41, 72, 41, 53, 72, 42, 54, 69, 43, 55, 72, 67, 43, 74, 67, 43, 36, 48, 72, 64, 67, 72, 67, 64, 67, 64, 60, 64, 60, 69, 71, 69, 60, 68, 70, 68, 60, 67, 60, 67, 67, 60, 67, 60, 67, 67, 60, 67, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 67, 70, 71, 60, 63, 64, 67, 70, 71, 60, 67, 70, 71, 60, 63, 64, 72, 75, 76, 67, 70, 71, 72, 75, 76, 67, 79, 72, 75, 76, 67, 70, 71, 66, 69, 71, 74, 72, 71, 76, 74, 79, 72, 81, 79, 84, 77, 76, 74, 79, 72, 81, 79, 83, 84, 67, 70, 71, 60, 63, 64, 67, 70, 71, 60, 67, 70, 71, 60, 63, 64, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 
    62, 62, 67, 70, 71, 60, 63, 64, 67, 70, 71, 60, 67, 70, 71, 60, 63, 64, 60, 63, 64, 55, 58, 59, 60, 63, 64, 55, 43, 46, 50, 60, 63, 64, 55, 58, 59, 54, 57, 62, 60, 63, 64, 62, 60, 60, 63, 64, 62, 60, 60, 63, 64, 63, 64, 62, 60, 60, 57, 60, 62, 60, 76, 74, 79, 72, 81, 79, 84, 77, 76, 74, 79, 72, 81, 79, 83, 84, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 67, 70, 71, 60, 63, 64, 67, 70, 71, 60, 67, 70, 71, 60, 63, 64, 72, 75, 76, 67, 70, 71, 72, 75, 76, 67, 72, 75, 76, 67, 70, 71, 66, 69, 71, 74, 72, 71, 36, 41, 41, 36, 36, 41, 41, 36, 36, 38, 39, 36, 36, 39, 38, 36, 36, 38, 39, 36, 36, 39, 38, 36, 36, 38, 39, 36, 36, 39, 38, 36, 36, 44, 
    volume: .word
    duration: .word 240, 240, 240, 240, 480, 240, 240, 480, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 240, 480, 240, 240, 480, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 480, 480, 600, 480, 480, 480, 480, 480, 480, 120, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 360, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 360, 360, 240, 240, 240, 240, 240, 240, 240, 240, 480, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 120, 208, 220, 220, 960, 480, 480, 1440, 960, 480, 480, 1920, 960, 480, 480, 1440, 960, 480, 480, 1920, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 120, 208, 220, 220, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 480, 480, 240, 240, 240, 240, 240, 240, 480, 240, 480, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 120, 320, 324, 148, 148, 284, 336, 152, 172, 480, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 360, 360, 240, 240, 240, 240, 240, 240, 240, 240, 480, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 120, 208, 220, 220, 960, 480, 480, 1440, 960, 480, 480, 1920, 960, 480, 480, 1440, 960, 480, 480, 1920, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 1200, 240, 240, 240, 480, 600, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 960, 240, 240, 480, 480, 240, 120, 240, 240, 480, 600, 480, 480, 1320, 480, 480, 120, 240, 480, 120, 240, 240, 360, 240, 240, 240, 240, 360, 240, 240, 240, 240, 360, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 360, 240, 240, 360, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 480, 120, 360, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 480, 240, 240, 480, 360, 240, 240, 120, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 480, 480, 600, 480, 480, 480, 480, 480, 480, 120, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 480, 240, 360, 240, 240, 120, 360, 240, 240, 480, 240, 240, 120, 240, 240, 360, 360, 240, 240, 240, 240, 240, 240, 240, 240, 480, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 480, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 120, 240, 240, 120, 120, 208, 220, 220, 120, 120, 240, 120, 240, 120, 120, 360, 300, 136, 628, 300, 412, 748, 164, 76, 36, 68, 60, 48, 44, 56, 36, 56, 48, 52, 40, 56, 72, 120, 64, 72, 108, 76, 68, 104, 64, 60, 96, 676, 244, 228, 524, 332, 140, 604, 308, 236, 120, 500, 252, 200, 516, 288, 248, 476, 280, 292, 452, 260, 220, 544, 256, 260, 484, 148, 504, 272, 252, 484, 292, 140, 320, 220, 264, 248, 88, 60, 960, 480, 480, 1440, 960, 480, 480, 1920, 960, 480, 480, 1440, 960, 480, 480, 1920, 240, 720, 120, 480, 120, 360, 600, 360, 240, 120, 600, 240, 240, 480, 240, 240, 56, 72, 120, 64, 72, 108, 76, 68, 104, 64, 60, 96, 676, 244, 228, 524, 332, 140, 604, 308, 236, 120, 500, 252, 200, 516, 288, 248, 600, 120, 360, 600, 240, 240, 600, 360, 360, 464, 720, 312, 204, 600, 240, 240, 600, 240, 240, 652, 260, 224, 632, 240, 240, 120, 360, 240, 240, 240, 240, 120, 120, 240, 240, 240, 240, 240, 120, 240, 240, 240, 240, 120, 960, 480, 480, 1440, 960, 480, 480, 1920, 960, 480, 480, 1440, 960, 480, 480, 1920, 56, 72, 120, 64, 72, 108, 76, 68, 104, 64, 60, 96, 676, 244, 228, 524, 332, 140, 604, 308, 236, 120, 500, 252, 200, 516, 288, 248, 476, 280, 292, 452, 260, 220, 544, 256, 260, 240, 504, 272, 252, 484, 292, 140, 320, 220, 264, 248, 88, 60, 196, 204, 164, 180, 196, 204, 164, 180, 240, 240, 240, 120, 120, 240, 120, 360, 240, 240, 240, 120, 120, 240, 240, 120, 240, 240, 240, 120, 120, 120, 240, 120, 240, 120, 240, 240, 240, 240, 360, 240, 120, 240, 240, 240, 240, 240, 240, 120, 120, 240, 240, 120, 240, 120, 240, 240, 120, 120, 120, 240, 120, 360, 240, 120, 240, 240, 120, 120, 120, 240, 240, 240, 240, 120, 240, 240, 120, 240, 120, 120, 240, 240, 120, 120, 360, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 120, 120, 120, 120, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 240, 120, 120, 120, 240, 240, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 240, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 120, 120, 120, 240, 120, 120, 240, 120, 240, 240, 240, 360, 120, 240, 120, 120, 120, 120, 120, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 240, 120, 120, 120, 240, 120, 240, 120, 120, 120, 120, 120, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 120, 120, 120, 120, 240, 120, 120, 120, 120, 120, 120, 120, 240, 240, 120, 120, 120, 240, 120, 120, 240, 240, 240, 120, 240, 240, 120, 240, 120, 120, 120, 120, 120, 240, 240, 240, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 480, 240, 240, 480, 240, 240, 480, 240, 240, 600, 296, 480, 240, 240, 480, 220, 240, 960, 480, 480, 240, 240, 480, 240, 240, 480, 240, 240, 600, 296, 480, 240, 240, 480, 220, 240, 960, 960, 240, 240, 240, 480, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 120, 220, 480, 240, 240, 480, 240, 240, 480, 240, 240, 600, 296, 480, 240, 240, 480, 220, 240, 960, 480, 480, 240, 240, 480, 240, 240, 480, 240, 240, 600, 296, 480, 240, 240, 480, 220, 240, 960, 960, 240, 240, 240, 240, 372, 720, 152, 156, 152, 152, 148, 140, 152, 120, 132, 112, 112, 248, 136, 140, 156, 120, 40, 136, 108, 68, 72, 100, 24, 84, 24, 24, 24, 24, 24, 24, 24, 148, 120, 104, 136, 120, 148, 140, 152, 120, 132, 112, 112, 248, 136, 140, 156, 120, 40, 136, 108, 68, 72, 100, 24, 84, 24, 24, 24, 24, 24, 24, 24, 148, 120, 104, 136, 120, 148, 120, 104, 136, 120, 148, 120, 104, 136, 120, 240, 240, 240, 240, 240, 240, 312, 360, 304, 240, 280, 796, 3052
# Music vars
base_time:      .word 0    # Base time for music timing
noteIndex:      .word 0    # note index
noteCount:      .word 332  # Total number of notes
instrument:     .word 2    # piano 
# level selection display
NUMBERS_DISPLAY:
    .word 
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
# paused display
PAUSED_ARRAY:
    .word 
    0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
# game over display
GAME_OVER_ARRAY:
    # Rows 1-8 are empty (64 * 8 = 512 pixels, 2048 bytes)
    # Rows 9-23 (64 * 15 = 960 pixels, 3840 bytes) 
    .word 
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1
# Virus display positions (row, column) offsets from base address
VIRUS_POSITIONS:
    .word 4096, 28   # 16 rows down (16*256=4096), 7 columns right (7*4=28)
    .word 4608, 56   # 18 rows down, 14 columns right
    .word 5632, 40   # 22 rows down, 10 columns right
    .word 6400, 64   # 25 rows down, 16 columns right

# Array to store virus colors (4 words)
VIRUS_DISPLAY_COLORS: .word 0, 0, 0, 0

# Virus sprite (4x4)
VIRUS_SPRITE:
    .word 
    0,1,1,0,
    1,1,1,1,
    1,1,1,1,
    0,1,1,0

MARIO_SPRITE:
    .word 
    0,0,0,1,1,0,0,0,
    0,0,1,1,1,1,0,0,
    0,1,1,0,0,1,1,0, 
    1,1,1,1,1,1,1,1, 
    1,0,1,0,0,1,0,1, 
    1,1,1,1,1,1,1,1, 
    0,1,0,0,0,0,1,0,   
    1,1,1,1,1,1,1,1,
    0,1,1,0,0,1,1,0 

# Extra temp storage. Think of it as like extra registers.
arr: .space 5120
# For testing purposes
newline: .asciiz "\n"
# Sound system constants
beep_pitch: .byte 69
beep_duration: .byte 100
beep_instrument: .byte 58
beep_volume: .byte 100

##############################################################################
# Mutable Data

# State of the current board
# Think of it as a 27x17 array.
# If a index at a array is 2, then it's a virus
# If a index at a array is 1, then it's a wall
# If a index at a array is 0, then it's empty space
.align 2             # Align to 4 bytes (2^2)
board: .space 1836 # 27 rows x 17 columns = 459 * 4 = 1836
##############################################################################
# Code
##############################################################################
	.text
	.globl main
	
# Before beginning, here is some information for how I'm storing my data in the registers
# $s0 = base address for display
# $s1 = address to the board state
# $s2 = record of the time till last time gravity was invoked.
# $s3 = Pill 1 Position
# $s4 = Pill 2 Position
# For example: Say we have the pill like the following
#     B
#     B
# Then, in this case Pill 1 refers to the bottem one while Pill 2 refers to the top one
# For example: Say we have the pill like the following
#     BB
# Then, in this case Pill 1 refers to the left one while Pill 2 refers to the right one
# $s5 = Pill 1 Color
# $s6 = Pill 2 Color
# $s7 = Virus Color


    # Run the game.
main:
    
    lw $s0, ADDR_DSPL
    la $s1, board                     # Load in the basic board address to $s1
    # Add in the inital time
    add $s2, $zero, 100
    
    # Instantiate the board as filled with zeros.
    la $t0, board
    li $t1, 405                       # Total bytes to initialize (27*17 = 459)
    li $t2, 0                         # Value to store (0)
    set_zero_board:
        beqz $t1, exit_zero_board     # Exit loop when counter ($t1) reaches 0
        sb $t2, 0( $t0 )              # Store 0 at current address
        addi $t0, $t0, 1              # Move to next byte
        addi $t1, $t1, -1             # Decrement counter
        j set_zero_board              # Repeat
    exit_zero_board:

    jal show_menu 
    
    # Initialize the game
    jal instantiate_map # Save return address at $ra and calls instantiate map to build map
    jal draw_mario
    # Draw the initalize position of the pill
    jal random_color
    addi $s4, $s0, 1428
    sw $s5, 0( $s4 )
    addi $s3, $s0, 1684
    sw $s6, 0( $s3 )
    
    # draw the viruses
    jal virus_initializer
    
    j game_loop
    
show_menu:
    addi $sp, $sp, -4        # Allocate space on the stack
    sw $ra, 0($sp)           # Save the original return address
    jal black_out
    lui $t0, 0x1000             # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000        # Load lower 16 bits of 0x10008000
    addi $t0, $t0, 3328         # skip to row 13
    la $t1, NUMBERS_DISPLAY
    li $t3, 1                   # pixel counter
    li $t4, 320                 # pixels in 5 rows
    j draw_menu_loop
    
draw_menu_loop:
    lw $t2, 0($t1)              # load value from array (0 = skip, 1 = fill)
    beq $t2, 1, draw_menu_white # if 1, fill w white
    j continue_menu_loop        # otherwise skip

draw_menu_white:
    jal draw_white           # Call draw_white subroutine
    j continue_menu_loop     # Continue after returning

draw_white:
    addi $sp, $sp, -4        # Allocate stack space
    sw $ra, 0($sp)           # Save return address
    
    lw $t6, white            # Load white color
    sw $t6, 0($t0)           # Draw white pixel
    
    lw $ra, 0($sp)           # Restore $t0
    addi $sp, $sp, 4         # Free stack space
    jr $ra                   # Return to caller

continue_menu_loop:
    addi $t0, $t0, 4            # next pixel in display
    addi $t1, $t1, 4            # next value in array 
    addi $t3, $t3, 1            # increment counter 
    bne $t3, $t4, draw_menu_loop
    
    # Wait for valid input (1-3)
    wait_for_input:
        la $t4, GRAVITY_SPEEDS
        lw $t0, ADDR_KBRD
        lw $t1, 0($t0)                      # Read keyboard ready bit
        beq $t1, $zero, wait_for_input      # loop until a key is pressed
        lw $t0, 4($t0)                      # Get the key value
        
        # Check input
        li $t3, 0x31
        beq $t0, $t3 set_easy
        li $t3, 0x32
        beq $t0, $t3 set_medium
        li $t3, 0x33
        beq $t0, $t3 set_hard
        j wait_for_input      # Invalid input, try again
    
    set_easy:
        li $t0, 0
        sw $t0, GRAVITY_SPEED
        j menu_done
        
    set_medium:
        li $t0, 1
        sw $t0, GRAVITY_SPEED
        j menu_done
        
    set_hard:
        li $t0, 2
        sw $t0, GRAVITY_SPEED
        j menu_done                 # not technically necessary but good to have
        
    menu_done:
        jal black_out
        lw $ra, 0($sp)           # Restore original return address
        addi $sp, $sp, 4         # Free stack space
        jr $ra

draw_mario:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    # Position Mario at bottom left (row 23, column 0)
    lui $t0, 0x1000
    ori $t0, $t0, 0x8000
    addi $t0, $t0, 5888    # 23 rows down (23*256=5888)
    
    la $t1, MARIO_SPRITE   # Load sprite data
    li $t2, 0              # Pixel counter
    li $t3, 72             # 8x9 = 72 pixels
    li $t4, 0xff0000       # Mario color (red)
    li $t5, 0              # Row counter
    
    draw_mario_rows:
        li $t6, 0          # Column counter
        draw_mario_cols:
            lw $t7, 0($t1)          # Load sprite value
            beqz $t7, skip_mario_pixel
            
            # Calculate pixel address
            sll $t8, $t5, 8        # row * 256
            sll $t9, $t6, 2        # col * 4
            add $t8, $t0, $t8      # base + row
            add $t8, $t8, $t9      # + column
            sw $t4, 0($t8)         # Draw pixel
            
        skip_mario_pixel:
            addi $t1, $t1, 4       # Next sprite value
            addi $t2, $t2, 1       # Pixel counter
            addi $t6, $t6, 1       # Column counter
            blt $t6, 8, draw_mario_cols
        
        addi $t5, $t5, 1           # Next row
        blt $t5, 9, draw_mario_rows
    
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra


# This function sets $s5 and $s6 as two random colors.
random_color: 
    # Generate a random number between 0 and 5
    li $v0, 42 # Syscall for random number generation
    li $a0, 0  # Use generator ID 0 (default)
    li $a1, 6  # Upper bound (exclusive): 6 (0..5)
    syscall
    move $t0, $a0 # Result saved in $t0
    la $t1, colors
    
    li $t5, 0
    beq $t0, $t5, red_red

    li $t5, 1
    beq $t0, $t5, blue_blue

    li $t5, 2
    beq $t0, $t5, yellow_yellow

    li $t5, 3
    beq $t0, $t5, red_blue

    li $t5, 4
    beq $t0, $t5, red_yellow

    li $t5, 5
    beq $t0, $t5, blue_yellow
    
red_red:
    lw $s5, 4($t1) 
    lw $s6, 4($t1) 
    j exit_random
    
blue_blue:
    lw $s5, 8($t1)
    lw $s6, 8($t1)
    j exit_random
    
yellow_yellow:
    lw $s5, 0($t1)
    lw $s6, 0($t1)
    j exit_random

red_blue:
    lw $s5, 4($t1)
    lw $s6, 8($t1)
    j exit_random
    
red_yellow:
    lw $s5, 4($t1)
    lw $s6, 0($t1)
    j exit_random

blue_yellow:
    lw $s5, 8($t1)
    lw $s6, 0($t1)
    
exit_random:
    jr   $ra          # Return to caller
    
# This function instializes the map boundaries
instantiate_map: 
    addi $sp, $sp, -4        # Allocate space on the stack
    sw $ra, 0($sp)           # Save the original return address
    
    li $t7, 0x808080 # $t1 = gray
    
    # Draw the left gray wall
    addi $t3, $zero, 1652 # t3 tracks the current location starting from the top
    addi $t4, $zero, 8052 # t4 is the bottem row
    wall_draw_left:
        beq $t3, $t4, wall_draw_left_end # Checks if reached the bottom yet.
        # This section draws it on the bitmap
        add $t5, $s0, $t3 # If it has not, update $t5 which is where we want to draw
        sw $t7, 0( $t5 ) # Draw the pixel
        addi $t3, $t3, 256 # Move down a row
        
        # This section adds it to the board state
        addi $a0, $t5, 0
        addi $a1, $zero, 1
        jal set_board_by_addr
        
        j wall_draw_left
    wall_draw_left_end:
    
    # Draw the right gray wall
    addi $t3, $zero, 1716 # t3 tracks the current location starting from the top
    addi $t4, $zero, 8116 # t4 is the bottem row
    wall_draw_right:
        beq $t3, $t4, wall_draw_right_end # Checks if reached the bottom yet.
        add $t5, $s0, $t3 # If it has not, update $t5 which is where we want to draw
        sw $t7, 0( $t5 ) # Draw the pixel
        addi $t3, $t3, 256 # Move down a row
        
        # This section adds it to the board state
        addi $a0, $t5, 0
        addi $a1, $zero, 1
        jal set_board_by_addr
        
        j wall_draw_right
    wall_draw_right_end:
    
    # Draw the bottom row
    addi $t3, $zero, 7796 # t3 tracks the current location starting from the left
    addi $t4, $zero, 7860 # t4 is the right part
    wall_bottom:
        beq $t3, $t4, wall_bottom_end # Checks if reached the bottom yet.
        add $t5, $s0, $t3 # If it has not, update $t5 which is where we want to draw
        sw $t7, 0( $t5 ) # Draw the pixel
        addi $t3, $t3, 4 # Move down a row
        
        # This section adds it to the board state
        addi $a0, $t5, 0
        addi $a1, $zero, 1
        jal set_board_by_addr
        j wall_bottom
    wall_bottom_end:

    # Draw the top row
    addi $t3, $zero, 1656 # t3 tracks the current location starting from the left
    addi $t4, $zero, 1680 # t4 is the right part
    wall_top_left: # Draw the left top part
        beq $t3, $t4, wall_top_left_end # Checks if reached the bottom yet.
        add $t5, $s0, $t3 # If it has not, update $t5 which is where we want to draw
        sw $t7, 0( $t5 ) # Draw the pixel
        addi $t3, $t3, 4 # Move down a row
        
        # This section adds it to the board state
        addi $a0, $t5, 0
        addi $a1, $zero, 1
        jal set_board_by_addr
        j wall_top_left
    wall_top_left_end: 
    addi $t3, $zero, 1692 # t3 tracks the current location starting from the left
    addi $t4, $zero, 1716 # t4 is the right part
    wall_top_right: #Draw the right top part
        beq $t3, $t4, wall_top_right_end # Checks if reached the bottom yet.
        add $t5, $s0, $t3 # If it has not, update $t5 which is where we want to draw
        sw $t7, 0( $t5 ) # Draw the pixel
        addi $t3, $t3, 4 # Move down a row
        
        # This section adds it to the board state
        addi $a0, $t5, 0
        addi $a1, $zero, 1
        jal set_board_by_addr
        j wall_top_right
    wall_top_right_end:
    
    # Now manually draw the top part
    addi $t3, $s0, 1420
    sw $t7, 0( $t3 )
    # This section adds it to the board state
    addi $a0, $t3, 0
    addi $a1, $zero, 1
    jal set_board_by_addr
    
    addi $t3, $s0, 1164
    sw $t7, 0( $t3 )
    # This section adds it to the board state
    addi $a0, $t3, 0
    addi $a1, $zero, 1
    jal set_board_by_addr
    
    addi $t3, $s0, 1436
    sw $t7, 0( $t3 )
    # This section adds it to the board state
    addi $a0, $t3, 0
    addi $a1, $zero, 1
    jal set_board_by_addr
    
    addi $t3, $s0, 1180
    sw $t7, 0( $t3 ) 
    # This section adds it to the board state
    addi $a0, $t3, 0
    addi $a1, $zero, 1
    jal set_board_by_addr
    
    lw $ra, 0($sp)           # Restore original return address
    addi $sp, $sp, 4         # Free stack space
    jr $ra                   # Return to main function



game_loop:
    # The first thing in the game loop is to evaluate if gravity is currently being enforced. If so, we can't allow the player to be moving as of the present as we wait for the block to fall.
    jal gravity
    jal play_background_music

    # How do I draw the current pill falling? I erase it at the beginning of the game_loop. After all the information is proessed, then I draw that one again the end
	# Setting the current pill positions to black
    la $t3, colors
    lw $t3, 12( $t3 )
	sw $t3, 0( $s3 )
    sw $t3, 0( $s4 )
	
	# Handle the timer for respond_to_S
    addi $s2, $s2, -1 # Decrement counter
    blt $s2, $zero, call_respond # If zero or negative, call the function
    
	# Checks if a key has been pressed.
	# If it has call keyboard_input
	lw $t0, ADDR_KBRD 
	lw $t8, 0( $t0 )
	beq $t8, 1, keybord_input
	
	# Updates the screen to show new changes
    update_board:
	sw $s5, 0( $s3 )
    sw $s6, 0( $s4 )
	
	# Pauses the program for 1 miliseconds
	li $v0, 32
    li $a0, 1
    syscall
    
    jal gravity
	
    # 5. Go back to Step 1
    j game_loop
    
# gravity:
# addi $sp, $sp, -4
# sw $ra, 0($sp)                  # save registers, return once gravity is done

# lw $t0, GRAVITY_COUNTER         # load counter (0)
# addi $t0, $t0, 1                # increment by 1
# sw $t0, GRAVITY_COUNTER
# lw $t1, GRAVITY_TIME
# blt $t0, $t1, game_loop         # only proceed if t0 == t1

# # if t0 >= t1,
# # reset gravity_counter
# li $t0, 0                       
# sw $t0, GRAVITY_COUNTER         # store 0 in gravity_counter

# # check if space below if horiozontal pill is occupied
# addi $t4, $s3, 4                # check if pill is horizontal
# bne $s4, $t4, vertical_gravity  
# addi $a0, $s3, 256              # check the row below pill 1
# jal get_board_by_addr
# bne $v0, $zero, freeze_pill     # lock pill in place if space below is occupied

# addi $a0, $s4, 256             # check the row below pill 2
# jal get_board_by_addr           # TODO: when i rotate pill, it is counting the bottom of pill1 as occupied since it used to be vertical so i need to find a way to update the pill occupation status before this
# bne $v0, $zero, freeze_pill     # lock pill in place if space below is occupied

# # pull horizontal pill down otherwise
# la $t3, colors
# addi $t3, $t3, 12
# sw $t3, 0( $s3 )
# sw $t3, 0( $s4 )
# addi $s3, $s3, 256
# addi $s4, $s4, 256
# lw $ra, 0($sp)
# addi $sp, $sp, 4
# j update_board

# vertical_gravity:
# addi $a0, $s3, 256              # check the row below pill 1, which is the bottom pill
# jal get_board_by_addr
# bne $v0, 0, freeze_pill         # lock pill in place if space below is occupied

# # pull vertical pill down otherwise
# la $t3, colors
# addi $t3, $t3, 12
# sw $t3, 0( $s3 )
# sw $t3, 0( $s4 )
# addi $s3, $s3, 256
# addi $s4, $s4, 256

# lw $ra, 0($sp)
# addi $sp, $sp, 4
# j update_board

# freeze_pill:
# # set pill locations as occupied
# addi $a0, $s3, 0                # a0 = bitmap location
# addi $a1, $zero, 1              # a1 = value to set
# jal set_board_by_addr
# addi $a0, $s4, 0                # a0 = bitmap location
# addi $a1, $zero, 1              # a1 = value to set
# jal set_board_by_addr
# jal generate_pill
# j update_board

# generate_pill:
# jal random_color
# addi $s4, $s0, 1428
# sw $s5, 0( $s4 )
# addi $s3, $s0, 1684
# sw $s6, 0( $s3 )

# # end game if pill is blocked
# addi $a0, $s3, 0
# jal get_board_by_addr
# bne $v0, 0, game_over
# j update_board

# response to user level selection
respond_to_1:  # Easy speed
    li $t0, 0
    sw $t0, GRAVITY_SPEED
    # Initialize counter with easy speed (100)
    la $t1, GRAVITY_SPEEDS
    lw $t2, 0($t1)        # Load easy speed (100)
    sw $t2, GRAVITY_COUNTER
    j update_board

respond_to_2:  # Medium speed
    li $t0, 1
    sw $t0, GRAVITY_SPEED
    # Initialize counter with medium speed (80)
    la $t1, GRAVITY_SPEEDS
    lw $t2, 4($t1)        # Load medium speed (80)
    sw $t2, GRAVITY_COUNTER
    j update_board

respond_to_3:  # Hard speed
    li $t0, 2
    sw $t0, GRAVITY_SPEED
    # Initialize counter with hard speed (60)
    la $t1, GRAVITY_SPEEDS
    lw $t2, 8($t1)        # Load hard speed (60)
    sw $t2, GRAVITY_COUNTER
    j update_board
    
call_respond:
    jal respond_to_S

    # Track call count in memory
    la $t0, call_count # Reuse $t0
    lw $t1, 0($t0) # Load current count
    addi $t1, $t1, 1
    sw $t1, 0($t0) # Store back
    
    # Every 15 updates, increase the speed until it reaches every 10 miliseconds
    li $t2, 15
    blt $t1, $t2, maintain_delay
    # Reset counter and decrease delay
    sw $zero, 0($t0) # Reset call count
    la $t0, delay_counter
    lw $t1, 0($t0)
    subi $t1, $t1, 15
    li $t2, 20
    bge $t1, $t2, update_delay
    li $t1, 20 # Minimum delay
update_delay:
    sw $t1, 0($t0) # Store new delay

maintain_delay:
    # Load current delay into $s2
    la $t0, delay_counter
    lw $s2, 0($t0)
    j update_board
    
store_delay:
    sw $t1, 0($t0) 
    move $s2, $t1 
    j update_board

# Ok, so a lot of my logic is based on the idea of converting the values of (1142) which is the memory address over to a more easier and manipulatable variable.
# For example, 1912 would convert to (0,0) on the board. 

# Notice that our board is (27 x 17) with it starting from two higher than the top left of the jar.
# Finally, here are the keyboard inputs map to the commands.
# A and D are the standard moving left and right
# W is rotate
# S is move down


# Input: $a0 = address offset (e.g., 1912, 1428, etc.)
# Output: $v0 = X (row), $v1 = Y (column)
addr_to_board:
    sub $t8, $a0, 1140      # Subtract the board's top-left offset (1140)
    li $t9, 256             # Bytes per row (64 columns * 4 bytes per pixel)
    
    divu $t8, $t9           # Divide by bytes per row: X = quotient, remainder = column offset
    mflo $v0                # $v0 = X (row)
    mfhi $t2                # $t2 = column offset (bytes)
    srl $v1, $t2, 2         # Convert bytes to Y (columns): divide by 4 (since 4 bytes per pixel)
    
    jr $ra  # Return to caller

# Get the value at the index board[$a0][$a1].
# For example board[i][0] where i >= 2 is 5 because it's the wall.
get_val_at_board:
    mul $t8, $a0, 17
    add $t8, $t8, $a1 # Get the index in the board
    sll $t8, $t8, 2       # Multiply cell index by 4 (since each cell is 4 bytes)
    add $t8, $t8, $s1 # Get the address on the board
    lw $v0, 0 ($t8)
    jr $ra

# The two functions above finally allows us to define the next two functions. The first loads a value $a1 into the board at $a0. The second reads
#--------------------------------------------------------------
# Sets the board value corresponding to a bitmap address.
# Input: $a0 = bitmap address, $a1 = value to set
#--------------------------------------------------------------
set_board_by_addr:
    addi $sp, $sp, -4         # Allocate space on the stack
    sw $ra, 0($sp)            # Save the original return address

    sub $a0, $a0, $s0
    jal addr_to_board
    add $t0, $v0, $zero       # X position of Pill 1 on board
    add $t1, $v1, $zero       # Y position of Pill 1 on board
    
    mul $t8, $t0, 17
    add $t8, $t8, $t1          # Get the index in the board
    sll $t8, $t8, 2       # Multiply cell index by 4 (since each cell is 4 bytes)
    add $t8, $t8, $s1          # Get the address on the board
    sw $a1, 0 ($t8)            # Set value at the board
    
    lw $ra, 0($sp)             # Restore original return address
    addi $sp, $sp, 4           # Free stack space
    jr $ra                     # Return to caller
    
#--------------------------------------------------------------
# Gets the board value corresponding to a bitmap address.
# Input:  $a0 = bitmap address
# Output: $v0 = value at the board
#--------------------------------------------------------------
get_board_by_addr:
    addi $sp, $sp, -4        # Allocate space on the stack
    sw $ra, 0($sp)           # Save the original return address

    sub $a0, $a0, $s0
    jal addr_to_board
    add $a0, $v0, $zero      # X position of Pill 1 on board
    add $a1, $v1, $zero      # Y position of Pill 1 on board
    jal get_val_at_board
    
    lw $ra, 0($sp)           # Restore original return address
    addi $sp, $sp, 4         # Free stack space
    jr $ra                   # Return to caller
 
#play a beep every time you shift the pill somewhere
play_beep:
    # Play a short beep sound
    addi $sp, $sp, -4
    sw $ra, 0($sp)            # Save return address
    
    # Load beep parameters directly
    li $v0, 31                # MIDI out syscall
    lb $a0, beep_pitch        # Load pitch (69)
    lb $a1, beep_duration     # Load duration (100)
    lb $a2, beep_instrument   # Load instrument (58)
    lb $a3, beep_volume       # Load volume (100)
    syscall
    
    lw $ra, 0($sp)            # Restore return address
    addi $sp, $sp, 4
    jr $ra
  
# Central function that handles all the keyboard inputs
keybord_input: 
    lw $a0, 4($t0)                  # Load second word from keyboard
    beq $a0, 0x70, respond_to_P     # check if space bar was pressed
    beq $a0, 0x71, respond_to_Q     # Check if the key 'q' was pressed
    beq $a0, 0x77, play_sound_W     # Check if the key 'w' was pressed
    beq $a0, 0x73, play_sound_S     # Check if the key 's' was pressed

    beq $a0, 0x61, play_sound_A     # Check if the key 'a' was pressed
    beq $a0, 0x64, play_sound_D     # Check if the key 'd' was pressed
    j update_board

# pauses game when called
respond_to_P:
    show_paused:
    lui $t0, 0x1000             # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000        # Load lower 16 bits of 0x10008000
    addi $t0, $t0, 1792         # skip to row 13
    la $t1, PAUSED_ARRAY
    li $t3, 1                   # pixel counter
    li $t4, 320                 # pixels in 5 rows
    j draw_paused_loop
    
draw_paused_loop:
    lw $t2, 0($t1)                      # load value from array (0 = skip, 1 = fill)
    beq $t2, 1, draw_paused_white       # if 1, fill w white
    j continue_paused_loop              # otherwise skip

paused_wait:
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)                      # Read keyboard ready bit
    beq $t1, $zero, paused_wait          # loop until a key is pressed
    lw $a0, 4($t0)                      # Get the key value
    
    lw $a0, 4($t0)                      # Get the key value
    li $t1, 0x70                        # store 'p' ascii in t1
    bne $a0, $t1, respond_to_P          # loop until key pressed is space bar
    
    j resume                       # if space bar is pressed, return to game_loop

draw_paused_white:
    jal draw_white           # Call draw_white subroutine

continue_paused_loop:
    addi $t0, $t0, 4            # next pixel in display
    addi $t1, $t1, 4            # next value in array 
    addi $t3, $t3, 1            # increment counter 
    blt $t3, $t4, draw_paused_loop
    j paused_wait

resume:
    lui $t0, 0x1000             # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000        # Load lower 16 bits of 0x10008000
    addi $t0, $t0, 1792         # skip to row 13
    la $t1, PAUSED_ARRAY
    li $t3, 1                   # pixel counter
    li $t4, 320                 # pixels in 5 rows
    j resume_loop
    
resume_loop:
    lw $t2, 0($t1)                      # load value from array (0 = skip, 1 = fill)
    beq $t2, 1, draw_resume_black       # if 1, fill w black
    j continue_resume_loop              # otherwise skip
    
draw_resume_black:
    jal draw_resume_black_loop      # Call draw_black subroutine
    j continue_resume_loop     # Continue after returning

draw_resume_black_loop:
    addi $sp, $sp, -4        # Allocate stack space
    sw $ra, 0($sp)           # Save return address
    
    lw $t6, black            # Load black color
    sw $t6, 0($t0)           # Draw black pixel
    
    lw $ra, 0($sp)           # Restore $t0
    addi $sp, $sp, 4         # Free stack space
    jr $ra                   # Return to caller

continue_resume_loop:
    addi $t0, $t0, 4            # next pixel in display
    addi $t1, $t1, 4            # next value in array 
    addi $t3, $t3, 1            # increment counter 
    blt $t3, $t4, resume_loop
    j game_loop

play_sound_W:
    jal play_beep
    jal respond_to_W
    j update_board

play_sound_A:
    jal play_beep
    jal respond_to_A
    j update_board
    
play_sound_S:
    jal play_beep
    jal respond_to_S
    j update_board

play_sound_D:
    jal play_beep
    jal respond_to_D
    j update_board

# Exits program when called
respond_to_Q:
    li $v0, 10                      # Quit gracefully
    syscall
    
# Moves Down the current pill
respond_to_S:
    addi $sp, $sp, -4         # Allocate space on the stack
    sw $ra, 0($sp)            # Save the original return address
    # Check if current pill is horizontal or not
    addi $t4, $s3, 4                        # t4 is the address of second half of pill
    bne $s4, $t4, vertical_down_move        # if pill is vertical, jump to vert down move
        # If the pill is currently horizontal, this means we need to check the bottom of pill 1 and 2
        addi $a0, $s3, 256                  # go to addr of pixel under s3
        jal get_board_by_addr               # check if there is smth at that address
        bne $v0, 0, finite_no_down_movement # if addr is not empty, don't go down
        addi $a0, $s4, 256                  # repeat process for second half of pill
        jal get_board_by_addr
        bne $v0, 0, finite_no_down_movement # if addr is not empty, don't go down
        j finite_down_movement              # else: go down
    vertical_down_move:
        # If the pill is currently vertical, this means we need to check the bottom of pill 1
        addi $a0, $s3, 256                  # if block under is taken: skip
        jal get_board_by_addr
        bne $v0, 0, finite_no_down_movement # 
    finite_down_movement:                   # shift both halves down one row
        addi $s3, $s3, 256
        addi $s4, $s4, 256
        j finite_update_down_movement
    finite_no_down_movement:
        sw $s5, 0($s3)
        sw $s6, 0($s4)
        
        jal store_registers
        addi $a0, $s3, 0
        add $a1, $zero, $s4
        jal set_board_by_addr
        jal restore_registers
        
        jal store_registers
        addi $a0, $s4, 0
        add $a1, $zero, $s3
        jal set_board_by_addr
        jal restore_registers
    
        jal random_color
        addi $s4, $s0, 1428
        addi $s3, $s0, 1684
        # Check game over        
        jal store_registers
        addi $a0, $s3, 0
        jal get_board_by_addr
        jal restore_registers
        bne $v0, 0, game_over
        
        jal evaluate_board
        
    finite_update_down_movement:
    lw $ra, 0($sp)            # Save the original return address
    addi $sp, $sp, 4          # Allocate space on the stack
    jr $ra
    
# Move left the current pill
respond_to_A:
    # Check if current pill is horizontal or not
    addi $t4, $s3, 4
    bne $s4, $t4, vertical_left_move
        # If the pill is currently horizontal, this means we only need to check the left of pill 1
        addi $a0, $s3, -4
        jal get_board_by_addr
        bne $v0, 0, finite_no_left_movement 
        j finite_left_movement
    # If the pill is currently vertical, this means we need to check the left of both pill 1 and 2.
    vertical_left_move:
        addi $a0, $s3, -4
        jal get_board_by_addr
        bne $v0, 0, finite_no_left_movement 
        addi $a0, $s4, -4
        jal get_board_by_addr
        bne $v0, 0, finite_no_left_movement 
        j finite_left_movement
    finite_left_movement:
        addi $s3, $s3, -4
        addi $s4, $s4, -4
    finite_no_left_movement:
    j update_board
    
# Move right the current pill
respond_to_D:
    # Check if current pill is horizontal or not
    addi $t4, $s3, 4
    bne $s4, $t4, vertical_right_move
        # If the pill is currently horizontal, this means we only need to check the right of pill 2
        addi $a0, $s4, 4
        jal get_board_by_addr
        bne $v0, 0, finite_no_right_movement 
        j finite_right_movement
    # If the pill is currently vertical, this means we need to check the right of both pill 1 and 2.
    vertical_right_move:
        addi $a0, $s3, 4
        jal get_board_by_addr
        bne $v0, 0, finite_no_right_movement 
        addi $a0, $s4, 4
        jal get_board_by_addr
        bne $v0, 0, finite_no_right_movement 
        j finite_right_movement
    finite_right_movement:
        addi $s3, $s3, 4
        addi $s4, $s4, 4
    finite_no_right_movement:
    j update_board


# Rotates the pill
respond_to_W:
    # Update the relative address
    sub $t5, $s3, $s0
    sub $t6, $s4, $s0


    add $a0, $t5, $zero
    jal addr_to_board
    add $t0, $v0, $zero # X position of Pill 1 on board
    add $t1, $v1, $zero # Y position of Pill 1 on board
    
    add $a0, $t6, $zero
    jal addr_to_board
    add $t3, $v0, $zero # X position of Pill 2 on board
    add $t4, $v1, $zero # Y position of Pill 2 on board
    
    # Updates the pill
    addi $t2, $t1, 1
    bne $t2, $t4, rotate_h_v
    # If the pill is currently horizontal, check if it can rotate to that position
    addi $a0, $s3, -256
    jal get_board_by_addr
    bne $v0, 0, finish_rotate
    
    # Clear old positions
    la $t3, colors
    addi $t3, $t3, 12
    sw $t3, 0($s3)
    sw $t3, 0($s4)
    
    addi $s4, $s3, -256
    j finish_rotate
    # If the pill is currently vertical
    rotate_h_v:
        # Check if location to be updated is a wall or not
        addi $a0, $s3, 4
        jal get_board_by_addr
        bne $v0, 0, rotate_h_l
        addi $s4, $s3, 4
        # Then we update the colour
        addi $t2, $s5, 0
        addi $s5, $s6, 0
        addi $s6, $t2, 0
        j finish_rotate
        rotate_h_l:
            # In this case, try rotating the other way
            addi $a0, $s3, -4
            jal get_board_by_addr
            bne $v0, 0, finish_rotate
            addi $s3, $s3, -4
            addi $s4, $s3, 4
            # Then we update the colour
            addi $t2, $s5, 0
            addi $s5, $s6, 0
            addi $s6, $t2, 0
    finish_rotate:
    j update_board
     
play_background_music:
    addi $sp, $sp, -4       # Allocate space on stack
    sw $ra, 0($sp)          # Save return address
    
    jal store_registers     # Save all t-registers (will be restored after music)
    
    li $v0, 30             # Syscall 30 - Get system time
    syscall                 # Returns time in milliseconds in $a0
    
    # Check if base_time is initialized (first run)
    lw $t0, base_time      # Load base_time from memory
    bnez $t0, check_note   # If already initialized, skip to note checking
    
    # Initialize base_time if it's 0 (first run)
    sw $a0, base_time      # Store current time as base_time
    j music_done           # Skip note playing on first frame

check_note:
    # Calculate elapsed time since music started
    lw $t0, base_time      # Load start time
    sub $t1, $a0, $t0      # Current time - start time = elapsed time
    
    # loading music playback state
    lw $t0, noteIndex
    lw $t2, noteCount
    
    # Check if we've played all notes
    bge $t0, $t2, music_done  # If all notes played, we're done
    
    # Calculate address of current note's timing data
    sll $t2, $t0, 2        # Multiply note index by 4 (word size)
    
    # Load timing for current note
    la $t3, times          # Load address of timing array
    add $t3, $t3, $t2      # Add offset for current note
    lw $t4, 0($t3)         # Load when this note should play (ms)
    
    # Compare elapsed time with note timing
    bgt $t1, $t4, play_current_note  # If time to play note, jump
    j music_done           # Otherwise skip to end

play_current_note:
    la $t3, notes          # Load address of NOTES array
    add $t3, $t3, $t2      # Add offset for current note
    lw $a0, 0($t3)         # Load pitch into $a0 for syscall
    la $t3, duration       # Load address of DURATION array
    add $t3, $t3, $t2      # Add offset for current note
    lw $a1, 0($t3)         # Load duration into $a1
    lw $a2, instrument     # Load INSTRUMENT $a2
    la $t3, volume       # Load address of VOLUME array
    add $t3, $t3, $t2      # Add offset for current note
    lw $a3, 0($t3)         # Load volume into $a3

    # Play the note
    li $v0, 31             # Syscall 31 - MIDI out
    syscall                # Play note with loaded parameters

    # Update note counter
    lw $t0, noteIndex       # Load current note index
    addi $t0, $t0, 1       # Increment to next note
    sw $t0, noteIndex       # Store updated index

music_done:
    jal restore_registers   
    lw $ra, 0($sp)        
    addi $sp, $sp, 4       # Deallocate stack space
    jr $ra                 # Return to caller

# generate viruses in random locations with random colors
virus_initializer:
    li $t1, 0               # loop counter = 0
    li $t9, 4               # make 4 viruses
    
virus_generate_loop:
    beq $t1, $t9, virus_end   # if $t1 == $t9, jump to virus_end
    lui $t0, 0x1000           # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000      # Load lower 16 bits of 0x10008000
    li $v0, 42                # rand generator for x-coord
    li $a0, 0                 # lower bound is 0
    li $a1, 15                # upper bound is 15
    syscall
    add $t2, $zero, $a0     # store rand gen x-coord in t2
    addi $t2, $t2, 30      # now bounds are 30-45
    
    li $v0, 42              # rand generator for y-coord
    li $a0, 0               # lower bound is 0
    li $a1, 17              # upper bound is 17
    syscall
    add $t3, $zero, $a0     # store rand gen x-coord in t3
    addi $t3, $t3, 13      # now bounds are 13-30
    
    sll $t2, $t2, 2         # multiply x-coord by 16
    sll $t3, $t3, 8         # multiply y_coord by 4
    add $t0, $t0, $t2       # add x offset to top left
    add $t0, $t0, $t3       # add y offset to that too
    
    lw $t4, 0($t0)            # load value at current memory address
    bne $t4, 0, virus_generate_loop  # if occupied, generate a new position
    jal make_virus            # jump and link make_virus as a subroutine
    j virus_generate_loop     # jump back to the top

make_virus:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    li $v0, 42                  # random number generator
    li $a0, 0                   # lower bound is 0
    li $a1, 3                   # upper bound is 3
    syscall
    add $a1, $zero, $a0         # index of VIRUS_COLORS
    la $a0, VIRUS_COLORS        # load address of colors
    sll $t5 $a1 2               # t5 = $a1 * 4 
    add $t6 $a0 $t5             # t6 = head of array + t5
    lw $t7, 0($t6)              # load the color value from $t6 into $t7
    sw $t7, 0($t0)              # draw pixel of color t6 at t0
    # This section adds it to the board state
    addi $a0, $t0, 0
    # save t1, t9 on the stack, run set_virus_occupied, then restore
    jal store_registers
    jal set_virus_occupied
    jal restore_registers
    addi $t1, $t1, 1            # increment virus counter
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

# input:
# a0 - bitmap addr of virus position
set_virus_occupied:
    addi $a1, $zero, 2
    addi $sp, $sp, -4         # open up space on stack
    sw $ra, 0($sp)            # save the original return address

    sub $a0, $a0, $s0
    jal addr_to_board
    add $t0, $v0, $zero       # x-coord of virus
    add $t1, $v1, $zero       # y-coord of virus
    
    mul $t8, $t0, 17
    add $t8, $t8, $t1          # get index
    sll $t8, $t8, 2
    add $t8, $t8, $s1          # get address
    sb $a1, 0 ($t8)            # set value at the board
    
    lw $ra, 0($sp)             # restore original return address
    addi $sp, $sp, 4           # free stack space
    jr $ra

draw_viruses:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    la $t0, VIRUS_POSITIONS    # Load virus positions
    la $t1, VIRUS_DISPLAY_COLORS # Load virus colors
    li $t2, 0                  # Virus counter
    
    draw_virus_loop:
        bge $t2, 4, draw_viruses_done
        
        # Calculate position
        lw $t3, 0($t0)         # Row offset
        lw $t4, 4($t0)         # Column offset
        add $t5, $s0, $t3      # Base + row
        add $t5, $t5, $t4      # + column
        
        # Get color
        sll $t6, $t2, 2        # index * 4
        add $t7, $t1, $t6
        lw $t8, 0($t7)         # Load color
        
        # Skip if color not set
        beqz $t8, next_virus
        
        # Draw virus sprite
        la $t9, VIRUS_SPRITE
        li $t7, 0              # Pixel counter
        
        draw_virus_pixels:
            bge $t7, 16, next_virus
            lw $t6, 0($t9)     # Load sprite value
            beqz $t6, skip_virus_pixel
            
            # Calculate pixel position
            li $t3, 4           # divisor
            div $t7, $t3        # lo = $t7 / 4, hi = $t7 % 4
            mflo $t6            # row = pixel / 4 (not needed here)
            mfhi $t3            # col = pixel % 4
            
            sll $t6, $t6, 8     # row * 256
            sll $t3, $t3, 2     # col * 4
            add $t3, $t5, $t6   # row offset
            add $t3, $t3, $t3   # column offset
            sw $t8, 0($t3)      # Draw pixel
            
        skip_virus_pixel:
            addi $t9, $t9, 4    # Next sprite value
            addi $t7, $t7, 1    # Increment counter
            j draw_virus_pixels
            
    next_virus:
        addi $t0, $t0, 8       # Next position pair
        addi $t2, $t2, 1       # Increment counter
        j draw_virus_loop
        
    draw_viruses_done:
        lw $ra, 0($sp)
        addi $sp, $sp, 4
        jr $ra

virus_end:

virus_sprite_initializer:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    la $t0, VIRUS_POSITIONS    # Load virus positions array
    la $t1, VIRUS_COLORS       # Load virus colors array
    li $t2, 0                  # Virus counter (0-3)
    
draw_side_viruses_loop:
    bge $t2, 4, side_viruses_done
    
    # Get position from VIRUS_POSITIONS
    sll $t3, $t2, 3            # index * 8 (2 words per position)
    add $t4, $t0, $t3        
    lw $t5, 0($t4)             # row offset
    lw $t6, 4($t4)             # col offset
    
    # Calculate base address
    add $t7, $s0, $t5          # base + row
    add $t7, $t7, $t6          # + column
    
    # Get color from VIRUS_COLORS (using modulo to cycle through colors)
    move $t8, $t2              # copy virus number
    li $t9, 3                  # divisor
    div $t8, $t9               # HI = $t8 % 3
    mfhi $t8                   # get remainder
    
    sll $t8, $t8, 2            # index * 4
    add $t9, $t1, $t8          # color address
    lw $t8, 0($t9)             # load color
    
    # Draw the virus sprite
    move $a0, $t7              # base address parameter
    move $a1, $t8              # color parameter
    jal draw_single_virus
    
    addi $t2, $t2, 1
    j draw_side_viruses_loop

side_viruses_done:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    j update_board

# Helper function to draw a single virus sprite
# Input: $a0 = base address, $a1 = color
draw_single_virus:
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    
    move $t9, $a0              # save base address
    move $t5, $a1              # save color
    
    la $t3, VIRUS_SPRITE       # load sprite pattern
    li $t4, 0                  # row counter
    
virus_rows:
    li $t6, 0                  # column counter
virus_cols:
    # Calculate memory address
    sll $t7, $t4, 8            # row * 256
    sll $t8, $t6, 2            # col * 4
    add $t7, $t9, $t7          # base + row offset
    add $t7, $t7, $t8          # + column offset
    
    # Check sprite pattern (row-major order)
    mul $t8, $t4, 4            # row * 4
    add $t8, $t8, $t6          # + col
    sll $t8, $t8, 2            # *4 (word offset)
    add $t8, $t3, $t8          # address of sprite value
    lw $t8, 0($t8)             # load sprite value
    
    beqz $t8, skip_sprite_pixel
    sw $t5, 0($t7)             # draw pixel
    
skip_sprite_pixel:
    addi $t6, $t6, 1
    blt $t6, 4, virus_cols     # loop through 4 columns
    
    addi $t4, $t4, 1
    blt $t4, 4, virus_rows     # loop through 4 rows
    
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

    
game_over:
    jal white_out
    lui $t0, 0x1000             # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000        # Load lower 16 bits of 0x10008000
    addi $t0, $t0, 2048         # skip to row 9
    la $t1, GAME_OVER_ARRAY
    li $t3, 1                   # pixel counter
    li $t4, 960                 # pixels in rows 9-23
    j draw_game_over_loop
    
draw_game_over_loop:
    lw $t2, 0($t1)              # load value from array (0 = skip, 1 = fill)
    beq $t2, 1, draw_black      # if 1, fill w black
    j continue_loop             # otherwise skip

draw_black:
    jal draw_black_loop         # Call draw_black subroutine
    j continue_loop             # Continue after returning

draw_black_loop:
    addi $sp, $sp, -4        # Allocate stack space
    sw $ra, 0($sp)           # Save return address
    
    lw $t6, black            # Load white color
    sw $t6, 0($t0)           # Draw white pixel
    
    lw $ra, 0($sp)           # Restore $t0
    addi $sp, $sp, 4         # Free stack space
    jr $ra                   # Return to caller

continue_loop:
    addi $t0, $t0, 4            # next pixel in display
    addi $t1, $t1, 4            # next value in array 
    addi $t3, $t3, 1            # increment counter 
    bne $t3, $t4, draw_game_over_loop
    j wait_for_R 

wait_for_R:                             # wait for R for retry or Q for quit
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)                      # Read keyboard ready bit
    beq $t1, $zero, wait_for_R          # loop until a key is pressed
    lw $a0, 4($t0)                      # Get the key value
        
    # Check input
    beq $a0, 0x72, respond_to_R
    beq $a0, 0x71, respond_to_Q
    j wait_for_R                        # if not Q or R, try again

respond_to_R:
    jal black_out
    
    # now, reset all game variables.
    la $t0, call_count
    sw $zero, 0($t0)
    
    la $t0, GRAVITY_COUNTER
    sw $zero, 0($t0)
    
    la $t0, base_time       # reset music to start as well
    sw $zero, 0($t0)
    la $t0, noteIndex
    sw $zero, 0($t0)
    
    la $t0, board           # wipe out board state
    li $t1, 1836            # Size of board array
clear_board_loop:
    beqz $t1, board_cleared
    sw $zero, 0($t0)
    addi $t0, $t0, 4
    addi $t1, $t1, -4
    j clear_board_loop
board_cleared:

    # zero out all virus positions and colors
    la $t0, VIRUS_DISPLAY_COLORS
    sw $zero, 0($t0)
    sw $zero, 4($t0)
    sw $zero, 8($t0)
    sw $zero, 12($t0)

    # clear all registers
    li $s0, 0
    li $s1, 0
    li $s2, 0
    li $s3, 0
    li $s4, 0
    li $s5, 0
    li $s6, 0
    li $s7, 0
    li $a0, 0
    li $a1, 0
    li $a2, 0
    li $a3, 0
    li $t0, 0
    li $t1, 0
    li $t2, 0
    li $t3, 0
    li $t4, 0
    li $t5, 0
    li $t6, 0
    li $t7, 0
    li $t8, 0
    li $t9, 0
    li $v0, 0
    li $v1, 0

    li $v0, 32        # add a bit of delay so that its not shocking
    li $a0, 100       # 100ms delay
    syscall
    j main            # restart entire game from menu screen
    
black_out:
    lui $t0, 0x1000           # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000      # Load lower 16 bits of 0x10008000
    li $t1, 0x1000A000        # end addr of bitmap
    li $t2, 0                 # load white
    black_out_loop:
    sw $t2, 0($t0)                      # draw pixel white
    addi $t0, $t0, 4                    # increment by one pixel
    bne $t0, $t1, black_out_loop        # loop until t0 reaches end address
    jr $ra
    
white_out:
    lui $t0, 0x1000           # Load upper 16 bits of 0x10008000
    ori $t0, $t0, 0x8000      # Load lower 16 bits of 0x10008000
    li $t1, 0x1000A000        # end addr of bitmap
    li $t2, 0xffffff          # load white
    white_out_loop:
        sw $t2, 0($t0)                      # draw pixel white
        addi $t0, $t0, 4                    # increment by one pixel
        # sleep for 20ms between each row
        sub $t7, $t0, $t6         # calculate current offset
        andi $t7, $t7, 0xff       # 0xFF = 255 in decimal
        bnez $t7, skip_sleep      # if not end of row skip sleep
        li $v0, 32                # sleep
        li $a0, 20                # 20ms
        syscall
    skip_sleep:
        bne $t0, $t1, white_out_loop        # loop until t0 reaches end address
        jr $ra

store_registers:            # push all t registers onto stack
    addi $sp, $sp, -40        
    sw $t0, 36($sp)
    sw $t1, 32($sp)
    sw $t2, 28($sp)
    sw $t3, 24($sp)
    sw $t4, 20($sp)
    sw $t5, 16($sp)
    sw $t6, 12($sp)
    sw $t7, 8($sp)
    sw $t8, 4($sp)
    sw $t9, 0($sp)
    jr $ra
    
restore_registers:            # pop all t registers from stack (reverse order LIFO)
    lw $t9, 0($sp)
    lw $t8, 4($sp)
    lw $t7, 8($sp)
    lw $t6, 12($sp)
    lw $t5, 16($sp)
    lw $t4, 20($sp)
    lw $t3, 24($sp)
    lw $t2, 28($sp)
    lw $t1, 32($sp)
    lw $t0, 36($sp)
    addi $sp, $sp, 40         # Deallocate all space at once
    jr $ra


# evaluate_board:
#   This subroutine scans the board from address offset 1912 to 7800.
#   For each starting location (i + j), it first checks horizontally:
#     - It counts consecutive cells (in steps of 4 bytes) with the same color.
#     - If 4 or more are found, it stores all those cell addresses in arr.
#   It then does a similar check vertically (in steps of 256 bytes).
#   Finally, it goes through the collected addresses in arr and resets the board
evaluate_board:
    # $t0 will hold our "remove" counter (number of entries stored in arr)
    addi $t9, $zero, 0 # remove = 0
    # Outer loop: i from 1912 to 7544
    li $t1, 1912
    
evaluate_outer_loop:
    addi $sp, $sp, -4        # Allocate space on the stack
    sw $ra, 0($sp)           # Save the original return address
    bge $t1, 7800, evaluate_removal_phase  
    # Inner loop: j from 0 to 60 
    li $t2, 0 # t2 = j
    evaluate_inner_loop:
         bge $t2, 60, evaluate_next_i    
         
         # t3 represents current location j
         add $t3, $t1, $t2 # i + j
         add $t4, $t3, $s0
         #load current board color
         lw $t6, 0( $t4 ) # color of current i j on map
         # Check if color is black
         beq $t6, $zero, evaluate_skip_j
         add $t7, $t3, 4
         li $t8, 1 # horizontal count = 1
         evaluate_horizontal_loop:
             add $t5, $t1, 60 # This stores i + 60
             bge $t7, $t5, evaluate_horiz_done
             
             add $t4, $t7, $s0 # Add offset
             lw $t5, 0 ($t4)
             bne $t5, $t6, evaluate_horiz_done # If color at t7 is the same color
             
             addi $t8, $t8, 1 # If it is, increase horizontal count
             addi $t7, $t7, 4 # Move 4 more left
             j evaluate_horizontal_loop
         evaluate_horiz_done:
            li $t5, 4 # load a constant 4 to check if statement
            blt $t8, $t5, evaluate_horiz_skip

            # Record horizontal removals
            move $t8, $t3 # Reuse the $t8, as count is not needed yet
            evaluate_horiz_store:
                bge $t8, $t7, evaluate_horiz_store_done
                la $t4, arr
                sll $t5, $t9, 2 # New offset = remove * 4
                add $t5, $t4, $t5 # Address in arr to store removal element
                sw $t8, 0( $t5 ) # Store the removal offset
                addi $t9, $t9, 1 # Increase removal
                add $t8, $t8, 4 # k += 4
                j evaluate_horiz_store
            evaluate_horiz_store_done:
         evaluate_horiz_skip:
            # Start of the vertical check
            add $t7, $t3, 256 # Check for the vertical pointer now
            li $t8, 1 # Reset the count for the vertical stuff now
            evaluate_vert_loop:
                li $t5, 7800 # Boundary for vertical scan
                bge $t7, $t5, evaluate_vert_done # Check if vertical went beyond 7544 yet.
                
                add $t4, $t7, $s0
                lw $t5, 0 ( $t4 ) # load in the current color at the vertical location
                bne $t5, $t6, evaluate_vert_done # Check color to original location
                
                addi $t8, $t8, 1 # If it is equal, increase horizontal count
                addi $t7, $t7, 256 # Move 256 more down
                j evaluate_vert_loop
        evaluate_vert_done:
            li $t5, 4
            blt $t8, $t5, evaluate_vert_skip # Check if there was at least 4 colors with the same color
            
            add $t8, $t3, $zero # Start adding the new elements to the thing
        evaluate_vert_store:
            bge $t8, $t7, evaluate_vert_store_done
            la $t4, arr
            sll $t5, $t9, 2 # Convert to bytes
            add $t5, $t4, $t5
            sw $t8, 0($t5)
            addi $t9, $t9, 1
            add $t8, $t8, 256
            j evaluate_vert_store
        evaluate_vert_store_done:
        evaluate_vert_skip:
        evaluate_skip_j:
            addi $t2, $t2, 4 # j += 4
            j evaluate_inner_loop
        evaluate_next_i:
            addi $t1, $t1, 256 # i += 256
            j evaluate_outer_loop
    evaluate_removal_phase:
        li $t2, 0 # This acts as i for the new loop at the end
        la $t6, colors
    evaluate_remove_loop:
        bge $t2, $t9, finish_eval
        
        la $t4, arr # load arr base address
        sll $t8, $t2, 2 # compute offset = t2 * 4
        addu $t8, $t4, $t8 # effective address in arr
        lw $t3, 0($t8) # t3 = board offset to remove
        
        add $t3, $t3, $s0
        lw $t5, 12( $t6 ) # Paint over the old stuff
        
        # Update the real board
        jal store_registers
        addi $a0, $t3, 0
        addi $a1, $zero, 0
        jal set_board_by_addr
        jal restore_registers
        
        sw $t5, 0($t3)
        addi $t2, $t2, 1
        j evaluate_remove_loop
    finish_eval:
        jal update_pill_structure
        lw $ra, 0($sp)
        addi $sp, $sp, 4
        jr $ra
# Here is a pseudo code of what evaluate_board does
#arr[10000];
#remove=0;
#for(int i = 1912;i < 7544;i++){
#    for(int j = 0;j < 60;j += 4){
#       int location = i + j;
#       color = board[location]
#       if(color == 0) continue;
#       location += 4;
#       int count = 1;
#       while(location < i + 60 && color == board[location]){
#           count += 1;
#       }
#       if(count >= 4){
#            for(int k = i + j;k < location;k+=4){
#               arr[remove] = k;
#            }
#       }
#       location = i + j;
#       int count = 1;
#       while(location < 7544 && color == board[location]){
#           count += 1;
#       }
#       if(count >= 4){
#            for(int k = i + j + 256;k < location;k+=256){
#               arr[remove] = k;
#            }
#       }
#    }
#}
#for(int i = 0;i < remove;i++){
#   board[arr[remove]] = -1;
#}
# Then, update the pill structure locations

# Correct pill structure after evaluate deletion:
# Recall that a pill at (x,y) and (x+1,y), the board[x][y] = (x+1,y) (in numebr form)
# This means that if (x+1,y) is deleted, then we need to update board[x][y] = (x,y)
# What we do, is iterate over the board and check the pill thing at each location
update_pill_structure:
    addi $sp, $sp, -4
    sw $ra, 0 ( $sp )
    li $t0, 1912 # Hold i = 0
    update_pill_structure_outer_loop:
        bge $t0, 7800, update_pill_structure_end
        li $t1, 0 # Hold j = 0
        update_pill_structure_inner_loop:
            bge $t1, 60, update_pill_structure_next_i
            
            add $t2, $t1, $t0 # Holds i + j
            add $t3, $t2, $s0 # Adds offset for the main page
            
            # Check if this is a pill or not
            # We first want to check if this place is even a wall or not. Basically, if it has value 2 or 0, it should not do anything
            jal store_registers
            addi $a0, $t3, 0
            jal get_board_by_addr
            jal restore_registers 
            
            beq $v0, 2, update_pill_structure_finish_update # Virus meaning we don't check
            beq $v0, 0, update_pill_structure_finish_update # Empty space meaning we don't check

            # Get the pill structure at the location
            jal store_registers
            addi $a0, $t3, 0
            jal get_board_by_addr
            jal restore_registers
            
            
            jal store_registers
            add $a0, $v0, $zero # pill structure we need to check
            jal get_board_by_addr
            jal restore_registers
            # Pill to actually check
            add $t4, $v0, $zero # t4 is the pill we want to check if it has been erased or not
            # Check if the pill structure at that point has been erased or not
            # If it has, set the pill structure so that it's just the current location
            # If it has not, do nothing
            beq $t4, $t3, update_pill_structure_finish_update 
                # This is the case where the other pill has been erased, then we update the $t3 to point to itself meaning it's now a 1x1 pill instead of a 2x1 pill
                jal store_registers
                addi $a0, $t3, 0
                addi $a1, $t3, 0
                jal set_board_by_addr
                jal restore_registers
            update_pill_structure_finish_update:
         
            addi $t1, $t1, 4
            j update_pill_structure_inner_loop
            
        update_pill_structure_next_i:
            addi $t0, $t0, 256
            j update_pill_structure_outer_loop
    update_pill_structure_end:
        lw $ra, 0 ( $sp )
        addi $sp, $sp, 4
        jr $ra

# How gravity is going to work is we go thorugh each row from the bottom to the top
# What, we check is if the values below are falling or non there. If they are falling or not there, the pill falls.
gravity:
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    # Decrement gravity counter
    lw $t0, GRAVITY_COUNTER
    addi $t0, $t0, -1
    sw $t0, GRAVITY_COUNTER
    
    # Only apply gravity if counter reaches 0
    bgtz $t0, gravity_done
    
    # Reset counter with current speed level
    lw $t1, GRAVITY_SPEED       # Get level index (0-2)
    sll $t1, $t1, 2             # Multiply by 4 (word size)
    la $t2, GRAVITY_SPEEDS
    add $t2, $t2, $t1           # Get address of current speed
    lw $t2, 0($t2)              # Load actual delay value
    sw $t2, GRAVITY_COUNTER     # Reset counter

gravity_start_loop:
    add $t9, $zero, $zero        # Movement flag

    li $t0, 7288                 # Starting position (i)
gravity_outer_loop:
    blt $t0, 1912, gravity_end_loop
    li $t1, 0                    # j counter
    
gravity_inner_loop:
    bge $t1, 60, gravity_next_i
    
    add $t2, $t1, $t0            # i + j
    add $t3, $t2, $s0            # First pill address
    
    # Check board value
    jal store_registers
    addi $a0, $t3, 0
    jal get_board_by_addr
    jal restore_registers
    
    beq $v0, 2, gravity_finish_inner_loop  # Skip viruses
    beq $v0, 0, gravity_finish_inner_loop  # Skip empty spaces
    addi $t4, $v0, 0             # Pill 2 to check
    
    addi $t5, $t4, 256
    addi $t6, $t3, 256           # Location below
    
    # Check space below first location
    jal store_registers
    addi $a0, $t5, 0
    jal get_board_by_addr
    jal restore_registers
    
    beq $v0, 0, gravity_check_second
    beq $v0, $t4, gravity_check_second
    j gravity_finish_inner_loop
    
gravity_check_second:
    # Check space below second location
    jal store_registers
    addi $a0, $t6, 0
    jal get_board_by_addr
    jal restore_registers
    
    beq $v0, 0, gravity_move_down
    beq $v0, $t3, gravity_move_down
    j gravity_finish_inner_loop
    
gravity_move_down:
    addi $t9, $t9, 1             # Set movement flag
    
    # Move pills down
    lw $t7, 0($t3)
    lw $t8, 0($t4)
    sw $t7, 0($t6)
    sw $t8, 0($t5)
    
    # Clear old positions
    la $t2, colors
    lw $t2, 12($t2)              # Load black color
    sw $t2, 0($t3)
    sw $t2, 0($t4)
    
    # Update board state
    jal store_registers
    addi $a0, $t6, 0
    add $a1, $t5, $zero
    jal set_board_by_addr
    jal restore_registers
    
    jal store_registers
    addi $a0, $t5, 0
    add $a1, $t6, $zero
    jal set_board_by_addr
    jal restore_registers
    
    jal store_registers
    addi $a0, $t3, 0
    add $a1, $zero, $zero
    jal set_board_by_addr
    jal restore_registers
    
    jal store_registers
    addi $a0, $t4, 0
    add $a1, $zero, $zero
    jal set_board_by_addr
    jal restore_registers
    
gravity_finish_inner_loop:
    addi $t1, $t1, 4
    j gravity_inner_loop
    
gravity_next_i:
    addi $t0, $t0, -256
    j gravity_outer_loop

gravity_end_loop:
    # If something moved, evaluate board and delay
    beq $t9, 0, gravity_done
    li $v0, 32
    li $a0, 500                  # Movement delay (constant)
    syscall
    jal evaluate_board
    j gravity_start_loop

gravity_done:
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

# Testing
add  $a0, $t3, $zero
li    $v0, 1       # syscall to print integer
syscall
# Print newline:
la    $a0, newline
li    $v0, 4
syscall
